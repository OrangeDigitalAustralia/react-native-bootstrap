apply plugin: "com.android.application"
apply plugin: "io.fabric"
apply plugin: "com.google.firebase.firebase-perf"

import com.android.build.OutputFile

// Related: https://github.com/facebook/react-native/issues/16906
project.ext.react = [
    entryFile: "index.js",
    bundleInRelease: true,
    resourcesDirRelease: "src/release/res"
]

apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"
apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

def enableSeparateBuildPerCPUArchitecture = false
def enableProguardInReleaseBuilds = false
def username = System.properties['user.name']

// https://pilloxa.gitlab.io/posts/safer-passwords-in-gradle/
def getPassword(String currentUser, String keyChain) {
    def stdout = new ByteArrayOutputStream()
    def stderr = new ByteArrayOutputStream()
    exec {
        commandLine 'security', '-q', 'find-generic-password', '-a', currentUser, '-s', keyChain, '-w'
        standardOutput = stdout
        errorOutput = stderr
        ignoreExitValue true
    }
    //noinspection GroovyAssignabilityCheck
    stdout.toString().trim()
}

// https://pilloxa.gitlab.io/posts/safer-passwords-in-gradle/
def pass = getPassword(username, "keychain_password_name")

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId rootProject.ext.appId
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    signingConfigs {
        release {
            if (project.hasProperty('MYAPP_RELEASE_STORE_FILE')) {
                storeFile file(MYAPP_RELEASE_STORE_FILE)
                storePassword pass
                keyAlias MYAPP_RELEASE_KEY_ALIAS
                keyPassword pass
            }
        }
        debug {
            storeFile file("/Users/${username}/.android/debug.keystore")
            storePassword 'android'
            keyAlias 'AndroidDebugKey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            // Note: CodePush updates should not be tested in Debug mode as they are overriden by the RN packager. However, because CodePush checks for updates in all modes, we must supply a key.
            buildConfigField "String", "CODEPUSH_KEY", '""'
            applicationIdSuffix ".debug"
            debuggable true

            resValue "string", "app_name", "${rootProject.ext.baseAppName} Debug"
        }
        releaseStaging {
            buildConfigField "String", "CODEPUSH_KEY", '"p5esTH6L7NB3I6wNXGETCNC0v3IkHkOur-Dx4"'
            applicationIdSuffix ".staging"
            resValue "string", "app_name", "${rootProject.ext.baseAppName} Staging"
            signingConfig signingConfigs.debug

            // Note: It is a good idea to provide matchingFallbacks for the new buildType you create to prevent build issues
            matchingFallbacks = ['release']
        }
        release {
            buildConfigField "String", "CODEPUSH_KEY", '"9KV0MPIswmVLpbsde-LkwRpprl7hSJ_uSWPlE"'
            resValue "string", "app_name", rootProject.ext.baseAppName

            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    compile project(':react-native-firebase')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.android.support:appcompat-v7:$rootProject.ext.supportLibVersion"
    implementation "com.facebook.react:react-native:+"  // From node_modules
    implementation project(':react-native-code-push')
    implementation project(':react-native-firebase')
    implementation project(':react-native-device-info')
    implementation project(':react-native-vector-icons')

    // Firebase dependencies
    // Be cautious of changing the versions of these dependencies as they might break the build process when incompatible
    implementation "com.google.android.gms:play-services-base:16.0.1"
    implementation "com.google.android.gms:play-services-measurement-base:16.0.3"
    implementation "com.google.firebase:firebase-core:16.0.3"
    implementation "com.google.firebase:firebase-perf:16.1.0"
    implementation "com.google.firebase:firebase-analytics:16.0.3"
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.5@aar') {
        transitive = true
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

// Firebase module
apply plugin: 'com.google.gms.google-services'


// Related to https://github.com/invertase/react-native-firebase/issues/1155
com.google.gms.googleservices.GoogleServicesPlugin.config.disableVersionCheck = true